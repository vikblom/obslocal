networks:
  obslocal:
    external: true

volumes:
  minio_data:
  caddy_data:
  grafana_data:

services:
  loki:
    image: grafana/loki:3.0.1
    command: "-config.expand-env=true -config.file=/etc/loki/config.yaml"
    ports:
      - 3100 # http
      - 9095 # grpc
      - 7946 # membership
    volumes:
      - ./loki-config.yaml:/etc/loki/config.yaml
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3100/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      - S3_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    networks:
      - obslocal

  mimir:
    image: grafana/mimir:2.13.0
    command: "-config.expand-env=true -config.file=/etc/mimir.yaml"
    ports:
      - 3200
      - 9095
      - 7946 # membership
    depends_on:
      - minio
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3200/ready || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      replicas: 3
    volumes:
      - ./mimir-config.yaml:/etc/mimir.yaml
    environment:
      - S3_SECERT_ACCESS_KEY=${MINIO_ROOT_PASSWORD}
    networks:
      - obslocal

  tempo:
    image: grafana/tempo:2.5.0
    command: "-config.expand-env=true -config.file=/etc/tempo.yaml"
    ports:
      - 3300
      - 4317 # grpc ingest
      - 4318 # http ingest
      - 7946 # membership
      # - "55680:55680"
      # - "55681:55681"
      # - "14250:14250"
    depends_on:
      - minio
    volumes:
      - "./tempo-config.yaml:/etc/tempo.yaml"
    environment:
      - S3_SECRET_KEY=${MINIO_ROOT_PASSWORD}
    networks:
      - obslocal

  # MINIO provides a local s3 API for backing storage.
  minio:
    image: minio/minio
    # Create the buckets.
    entrypoint:
      - sh
      - -euc
      - |
        mkdir -p /data/loki-data && \
        mkdir -p /data/loki-ruler && \
        mkdir -p /data/mimir-data && \
        mkdir -p /data/tempo-data && \
        minio server /data
    environment:
      # Use the user/pass as key/secret.
      - MINIO_ROOT_USER=s3key
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD}
      - MINIO_PROMETHEUS_AUTH_TYPE=public
      - MINIO_UPDATE=off
    ports:
      - 9000
    volumes:
      - minio_data:/data
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:9000/minio/health/live" ]
      interval: 15s
      timeout: 20s
      retries: 5
    networks:
      - obslocal

  caddy:
    image: caddy:2-alpine
    volumes:
      - caddy_data:/data
      - ./Caddyfile:/etc/caddy/Caddyfile
    depends_on:
      - loki
      - mimir
      - tempo
    ports:
      - "3100:3100" # Loki
      - "3200:3200" # Mimir
      - "3301:3301" # Tempo
      - "3302:3302"
    networks:
      - obslocal

  # promtail:
  #   image: grafana/promtail:2.7.1
  #   command: -config.file=/etc/promtail/config.yaml
  #   volumes:
  #     - ./promtail.yaml:/etc/promtail/config.yaml
  #     - /var/run/docker.sock:/var/run/docker.sock
  #     - /var/lib/docker/containers:/var/lib/docker/containers
  #   depends_on:
  #     - caddy
  #   networks:
  #     - obslocal

  prometheus:
    image: prom/prometheus:v2.41.0
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --log.level=info
      - --storage.tsdb.path=/prometheus
      - --web.console.libraries=/usr/share/prometheus/console_libraries
      - --web.console.templates=/usr/share/prometheus/consoles
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    network_mode: "host"
    # ports:
    #   - "9090:9090"

  grafana:
    image: grafana/grafana:11.3.0
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_USERS_DEFAULT_THEME=dark
      - GF_LOG_MODE=console
      - GF_LOG_LEVEL=critical
    volumes:
      - ./grafana.yaml:/etc/grafana/provisioning/datasources/ds.yaml
      - grafana_data:/var/lib/grafana
    depends_on:
      - caddy
    healthcheck:
      test: [ "CMD-SHELL", "wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 5
    ports:
      - "3000:3000"
    networks:
      - obslocal

  # Open Telemetry Collector is an ingest agent for all three kinds of signals.
  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.107.0
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - "./otelc-config.yaml:/etc/otel-collector-config.yaml"
    # All the ports are visible.
    network_mode: "host"
